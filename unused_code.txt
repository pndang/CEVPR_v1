# import cProfile
# import re
# cProfile.run('re.compile("foo|bar")')
# from werkzeug.middleware.profiler import ProfilerMiddleware
# from queue import Queue

# app = Dash(__name__)

# server.secret_key = os.environ.get('SECRET_KEY', 'my-secret-key')

# test = html.Div([
#     html.Img(src="/assets/inferno.png", height=30)
# ])


# html.P("Choose color palette:"),
    
    # dcc.RadioItems(options=[
    #     {
    #         "label": html.Div(
    #             [
    #                 html.Img(src="/assets/inferno.png", height=30),
    #                 html.Div("inferno", style={'font-size': 15, 'padding-left': 1}),
    #             ], style={'display': 'flex', 'align-items': 'center', 'justify-content': 'center'}
    #         ),
    #         "value": "inferno",
    #     },
    #     {
    #         "label": html.Div(
    #             [
    #                 html.Img(src="/assets/icefire.png", height=30),
    #                 html.Div("icefire", style={'font-size': 15, 'padding-left': 1}),
    #             ], style={'display': 'flex', 'align-items': 'center', 'justify-content': 'center'}
    #         ),
    #         "value": "icefire",
    #     },
    #     {
    #         "label": html.Div(
    #             [
    #                 html.Img(src="/assets/rainbow.png", height=30),
    #                 html.Div("rainbow", style={'font-size': 15, 'padding-left': 1}),
    #             ], style={'display': 'flex', 'align-items': 'center', 'justify-content': 'center'}
    #         ),
    #         "value": "rainbow",
    #     },
    #     {
    #         "label": html.Div(
    #             [
    #                 html.Img(src="/assets/autumn.png", height=30),
    #                 html.Div("autumn", style={'font-size': 15, 'padding-left': 1}),
    #             ], style={'display': 'flex', 'align-items': 'center', 'justify-content': 'center'}
    #         ),
    #         "value": "autumn",
    #     },
    #     {
    #         "label": html.Div(
    #             [
    #                 html.Img(src="/assets/ocean.png", height=30),
    #                 html.Div("ocean", style={'font-size': 15, 'padding-left': 1}),
    #             ], style={'display': 'flex', 'align-items': 'center', 'justify-content': 'center'}
    #         ),
    #         "value": "ocean",
    #     },
    # ], id='mypalette', value='mako'),


#   dbc.Row([
#     dbc.Col([
#         html.P("Choose smoothing period (rolling averages of n days prior & after):"),
#     ], width=5
#     ),
#     dbc.Col([
#         html.Div(
#         dcc.RadioItems(options=[
#         {'label': '0 ~ raw data', 'value': 0},
#         {'label': '1', 'value': 1},
#         {'label': '2', 'value': 2},
#         {'label': '3', 'value': 3},
#         {'label': '4', 'value': 4},
#         {'label': '5', 'value': 5}],
#         id='smoothing-period', value=3, inline=True,
#         labelStyle={'padding-left':42})
#     )], width={'size': 5, 'offset': 0})
#   ], justify='start'),

#   html.Br(),


    # print(palette)
    # print(palette[0])
    # print(f'{ctx.triggered_id.index}+{palette}')
    

# app.run_server(debug=True, dev_tools_ui=None, dev_tools_props_check=None)




if os.getenv("PROFILER", None):
    app.server.config["PROFILE"] = True
    app.server.wsgi_app = ProfilerMiddleware(
      app.server.wsgi_app, sort_by("cumtime", "tottime"), restrictions=[50]
    )

for i in range(total_rows):
    if i < 3:
      queue.append(data[i])
      values = data[:i] + data[i, i+num_rows+1]
    elif len(queue) < num_rows*2+1:
      queue.append(data[i])
      values = data[i-num_rows, i+num_rows+1]

# plt.savefig(sys.stdout.buffer)
# sys.stdout.flush()


#Function for calculating rolling averages
# def calculate_rolling_avg(dataframe, column_idx, num_rows):

#   """Calculate rolling averages of the data field at 'column_idx' by averaging
#   'num_rows' rows prior and after."""

#   dataframe['rolling_avg'] = 0
#   for i in range(0, dataframe.shape[0]):
#     idx = i
#     last_idx = dataframe.shape[0]-1
#     count = 0  # count number of values added (imaginary), to handle the first and last num_rows rows
#                # Idea: if index is 0, assume num_rows "before" values already added, 
#                #       if index is 1, assume num_rows-1 "before" values already added, 
#                #       if index is -3, assume num_rows-2 "after" values already added,
#                #       so on
#     values_before = []
#     while len(values_before) < num_rows and count < num_rows:
#       if i == 0:
#         break
#       elif i < num_rows:
#         break
#       values_before.append(dataframe.iloc[idx-1][column_idx])
#       idx -= 1
#       count += 1   
    
#     idx, count = i, 0
#     values_after = []
#     while len(values_after) < num_rows and count < num_rows:
#       if i == last_idx:
#         break
#       elif dataframe.shape[0]-i <= num_rows:
#         values_after = list(dataframe[dataframe.columns[column_idx]][i+1:])
#         break
#       values_after.append(dataframe.iloc[idx+1][column_idx])
#       idx += 1
#       count += 1

#     # Calculating the average
#     average = np.mean(values_before + [dataframe.iloc[i][column_idx]] + values_after)
#     dataframe.at[i, 'rolling_avg'] = average

#   return None

# app.enable_dev_tools(
  #   dev_tools_ui=True,
  #   dev_tools_serve_dev_bundles=True,
  # )
  